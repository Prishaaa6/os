#include <stdio.h>
#define MAX_BLOCKS 10
#define MAX_PROCESSES 10

void firstFit(int blockSize[], int m, int processSize[], int n) {
    int allocation[MAX_PROCESSES];

    // Initialize all allocations as -1 (not allocated)
    for (int i = 0; i < n; i++)
        allocation[i] = -1;

    // Pick each process and find the first block that can accommodate it
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            if (blockSize[j] >= processSize[i]) {
                // Allocate block j to process i
                allocation[i] = j;
                blockSize[j] -= processSize[i];
                break;
            }
        }
    }

    printf("\nProcess No.\tProcess Size\tBlock No.\n");
    for (int i = 0; i < n; i++) {
        printf(" %d\t\t%d\t\t", i + 1, processSize[i]);
        if (allocation[i] != -1)
            printf("%d\n", allocation[i] + 1);
        else
            printf("Not Allocated\n");
    }
}

int main() {
    int blockSize[MAX_BLOCKS], processSize[MAX_PROCESSES];
    int m, n;

    printf("Enter number of memory blocks: ");
    scanf("%d", &m);
    printf("Enter size of each block:\n");
    for (int i = 0; i < m; i++) {
        printf("Block %d: ", i + 1);
        scanf("%d", &blockSize[i]);
    }

    printf("\nEnter number of processes: ");
    scanf("%d", &n);
    printf("Enter size of each process:\n");
    for (int i = 0; i < n; i++) {
        printf("Process %d: ", i + 1);
        scanf("%d", &processSize[i]);
    }

    firstFit(blockSize, m, processSize, n);

    return 0;
}


output:
Enter number of memory blocks: 6
Enter size of each block:
Block 1: 200
Block 2: 400
Block 3: 600
Block 4: 500
Block 5: 300
Block 6: 250

Enter number of processes: 4
Enter size of each process:
Process 1: 357
Process 2: 210
Process 3: 468
Process 4: 491

Process No.	Process Size	Block No.
 1		357		2
 2		210		3
 3		468		4
 4		491		Not Allocated

